AWSTemplateFormatVersion: 2010-09-09
Description: This template creates a VPC for Kali Linux Purple SOC Lab 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: VPC CIDR
        Parameters:
          - PurpleVPCNetCIDR
      - Label:
          default: Subnet CIDR
        Parameters:
          - PublicSubnetCIDR
          - PrivateSubnetCIDR
          - DMZSubnetCIDR
          - CompromizedSubnetCIDR
      - Label:
          default: SSH CIDR
        Parameters:
          - SSHLocation
          
          
Parameters:

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String
  PurpleVPCNetCIDR:
    Default: 192.168.0.0/16
    Description: Please Enter the IP Range of the VPC
    Type: String
  PrivateSubnetCIDR:
    Default: 192.168.253.0/24
    Description: Please Enter the IP Range of the Private Subnet
    Type: String
  PublicSubnetCIDR:
    Default: 192.168.252.0/24
    Description: Please Enter the IP Range of the Public Subnet
    Type: String
  DMZSubnetCIDR:
    Default: 192.168.251.0/24
    Description: Please Enter the IP Range of the DMZ Subnet
    Type: String
  CompromizedSubnetCIDR:
    Default: 192.168.250.0/24
    Description: Please Enter the IP Range of the Public Subnet
    Type: String
    
    
Resources:
  PurpleVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref PurpleVPCNetCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: PurpleVPC

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet
      VpcId: !Ref PurpleVPC

  DMZSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref DMZSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DMZ
      VpcId: !Ref PurpleVPC

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public
      VpcId: !Ref PurpleVPC

  CompromizedSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref CompromizedSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Compromized
      VpcId: !Ref PurpleVPC

  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  IGWAttacment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref PurpleVPC
      InternetGatewayId: !Ref IGW

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: PublicRouteTable
      VpcId: !Ref PurpleVPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
      
#The Private Route Table needs more routes to be included in the NAT-EC2 file because need the Bastion and the NAT to create      

#  PrivateRouteTable:
#    Type: 'AWS::EC2::RouteTable'
#    Properties:
#      Tags:
#        - Key: Name
#          Value: PrivateRouteTable
#      VpcId: !Ref PurpleVPC

#  PrivateSubnet1RouteTableAssociation:
#    Type: 'AWS::EC2::SubnetRuteTableAssociation'
#    Properties:
#      RouteTableId: !Ref PrivateRouteTable
#      SubnetId: !Ref PrivateSubnet

      
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref SSHLocation  
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref PurpleVPC
    
  WANNI:  
    Type: 'AWS::EC2::NetworkInterface'
    Properties: 
      Description: Network Interface for WAN
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key: Name
          Value: Byzantium | WAN | Public Subnet
          
  ClusterNI:  
    Type: 'AWS::EC2::NetworkInterface'
    Properties: 
      Description: Network Interface for Cluster
      SubnetId: !Ref PrivateSubnet
      Tags: 
        - Key: Name
          Value: Byzantium | Cluster | Private Subnet         
          
  LANNI:  
    Type: 'AWS::EC2::NetworkInterface'
    Properties: 
      Description: Network Interface for LAN
      SubnetId: !Ref CompromizedSubnet
      Tags: 
        - Key: Name
          Value: Byzantium | LAN | Compromized Subnet  
          
  MGMTNI:  
    Type: 'AWS::EC2::NetworkInterface'
    Properties: 
      Description: Network Interface for Management
      SubnetId: !Ref DMZSubnet
      Tags: 
        - Key: Name
          Value: Byzantium | Management | Demilitarized Subnet     
          

Outputs:
  PurpleVPC:
    Description: PurpleVPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
    Value: !Ref PurpleVPC
  PublicSubnet:
    Description: Public ID
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet'
    Value: !Ref PublicSubnet
  PrivateSubnet:
    Description: PrivateSubnet ID
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet'
    Value: !Ref PrivateSubnet 
  DMZSubnet:
    Description: DMZSubnet ID
    Export:
      Name: !Sub '${AWS::StackName}-DMZSubnet'
    Value: !Ref DMZSubnet    
  CompromizedSubnet:
    Description: CompromizedSubnet ID
    Export:
      Name: !Sub '${AWS::StackName}-CompromizedSubnet'
    Value: !Ref CompromizedSubnet
  SSHSecurityGroup:
    Description: SSHSecurityGroup ID
    Export:
      Name: !Sub '${AWS::StackName}-SSHSecurityGroup'
    Value: !Ref SSHSecurityGroup    
  WANNI:
    Description: Network Interface for WAN
    Export:
      Name: !Sub '${AWS::StackName}-WANNI'
    Value: !Ref WANNI       
  ClusterNI:
    Description: Network Interface for Cluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterNI'
    Value: !Ref ClusterNI        
  LANNI:
    Description: Network Interface for LAN
    Export:
      Name: !Sub '${AWS::StackName}-LANNI'
    Value: !Ref LANNI      
  MGMTNI:
    Description: Network Interface for Management
    Export:
      Name: !Sub '${AWS::StackName}-MGMTNI'
    Value: !Ref MGMTNI      
    
    
